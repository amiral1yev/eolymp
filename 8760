def dfs(v):
    print(v, end=' ')  # Выводим вершину v
    used[v] = True  # Отмечаем вершину как посещённую
    for to in g[v]:  # Перебираем соседей вершины v
        if not used[to]:  # Если сосед ещё не посещён
            dfs(to)  # Рекурсивно вызываем dfs для соседа

# Читаем количество вершин n и количество рёбер m
n, m = map(int, input().split())

# Создаём список смежности g и список использованных вершин used
g = [[] for _ in range(n + 1)]
used = [False] * (n + 1)

# Читаем рёбра и строим список смежности
for _ in range(m):
    a, b = map(int, input().split())
    g[a].append(b)
    g[b].append(a)

# Читаем начальную вершину для dfs
v = int(input())

# Запускаем dfs с вершины v
dfs(v)
