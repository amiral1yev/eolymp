from collections import deque

# Функция BFS для нахождения кратчайших расстояний от вершины start
def bfs(start, n, g):
    # Инициализируем массив dist значениями -1, dist[i] будет хранить кратчайшее расстояние от start до вершины i
    dist = [-1] * (n + 1)
    dist[start] = 0

    # Инициализация очереди для BFS
    q = deque([start])

    while q:
        v = q.popleft()  # Извлекаем вершину из очереди
        for to in range(1, n + 1):
            # Если существует ребро (v, to) и вершина to еще не посещена
            if g[v][to] == 1 and dist[to] == -1:
                q.append(to)  # Добавляем вершину to в очередь
                dist[to] = dist[v] + 1  # Обновляем кратчайшее расстояние

    return dist

# Основная часть программы
n = int(input())  # Количество вершин в графе
g = [[0] * (n + 1) for _ in range(n + 1)]  # Матрица смежности

# Чтение графа
for i in range(1, n + 1):
    row = list(map(int, input().split()))
    for j in range(1, n + 1):
        g[i][j] = row[j - 1]

a, b = map(int, input().split())  # Вершины для поиска кратчайшего пути (a и b)

# Запускаем поиск в ширину из вершины a
dist = bfs(a, n, g)

# Выводим результат для вершины b
print(dist[b])
