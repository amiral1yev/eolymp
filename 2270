import sys
sys.setrecursionlimit(10**6)

def find_cycle(n, edges):
    graph = [[] for _ in range(n + 1)]
    for u, v in edges:
        graph[u].append(v)

    visited = [0] * (n + 1)  # 0: not visited, 1: visiting, 2: fully visited
    stack = []  # To store the current path
    cycle_start = -1  # To track the starting point of a cycle

    def dfs(vertex):
        nonlocal cycle_start
        visited[vertex] = 1
        stack.append(vertex)

        for neighbor in graph[vertex]:
            if visited[neighbor] == 0:  # Unvisited vertex
                if dfs(neighbor):
                    return True
            elif visited[neighbor] == 1:  # Back edge detected
                cycle_start = neighbor
                return True
        
        stack.pop()
        visited[vertex] = 2
        return False

    for i in range(1, n + 1):
        if visited[i] == 0:
            if dfs(i):
                cycle = []
                while stack:
                    node = stack.pop()
                    cycle.append(node)
                    if node == cycle_start:
                        break
                cycle.reverse()
                print("YES")
                print(*cycle)
                return

    print("NO")


if __name__ == "__main__":
    n, m = map(int, input().split())  # Number of vertices and edges
    edges = []
    for _ in range(m):
        u, v = map(int, input().split())
        edges.append((u, v))
    find_cycle(n, edges)
