def dfs(v, p):
    global flag, c
    if flag: return
    used[v] = 1
    c += 1
    for i in range(n):
        if i != p and g[v][i]:
            if used[i]: flag = 1
            else: dfs(i, v)

n = int(input())
c = 0
flag = 0
used = [0] * n
g = [[0] * n for _ in range(n)]
for i in range(n):
    g[i] = list(map(int, input().split()))
dfs(0, -1)
if flag or c != n:
    print("NO")
else:
    print("YES")
