def dfs(v, parent, graph, visited):
    visited[v] = True
    for neighbor in graph[v]:
        if not visited[neighbor]:
            if dfs(neighbor, v, graph, visited):  # Recursive DFS call
                return True
        elif neighbor != parent:
            return True  # Found a cycle
    return False


def has_cycle(n, edges):
    # Build adjacency list for the graph
    graph = {i: [] for i in range(1, n + 1)}
    unique_edges = set(edges)  # Using a set to remove duplicates
    for u, v in unique_edges:
        graph[u].append(v)
        graph[v].append(u)

    visited = [False] * (n + 1)  # To track visited nodes (1-based index)

    # Perform DFS for each disconnected component
    for i in range(1, n + 1):
        if not visited[i]:
            if dfs(i, -1, graph, visited):
                return "YES"
    return "NO"


# Main function to take input and check for cycles
if __name__ == "__main__":
    n, m = map(int, input().split())  # Number of vertices and edges
    edges = set()  # Using a set to ensure roads are unique
    for _ in range(m):
        u, v = map(int, input().split())
        edges.add((min(u, v), max(u, v)))  # Normalize edge direction (u, v) == (v, u)
    print(has_cycle(n, edges))
