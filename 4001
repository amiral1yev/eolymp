def dfs(grid, i, j):
    # Проверяем границы лабиринта и наличие стены
    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '*':
        return 0

    # Помечаем клетку как посещённую, ставя стену
    grid[i][j] = '*'
    # Увеличиваем счётчик клеток комнаты и обходим соседей
    count = 1
    count += dfs(grid, i - 1, j)  # вверх
    count += dfs(grid, i + 1, j)  # вниз
    count += dfs(grid, i, j - 1)  # влево
    count += dfs(grid, i, j + 1)  # вправо
    return count


# Основная программа
if __name__ == "__main__":
    n = int(input())  # Количество строк в лабиринте
    grid = []  # Лабиринт
    
    # Считывание лабиринта
    for _ in range(n):
        grid.append(list(input().strip()))

    # Считывание стартовой позиции
    start_i, start_j = map(int, input().split())

    # Запуск поиска в глубину из начальной позиции
    result = dfs(grid, start_i - 1, start_j - 1)  # Индексы Python начинаются с 0
    print(result)  # Вывод результата
