def dfs(v, used, g):
    # Помечаем вершину как посещенную
    used[v] = True
    # Начинаем обход всех соседей
    for i in range(len(g)):
        if g[v][i] == 1 and not used[i]:
            dfs(i, used, g)

# Чтение входных данных
n, s = map(int, input().split())  # Количество вершин и начальная вершина (1-indexed)
s -= 1  # Переводим в 0-indexed для удобства работы с массивами

# Чтение матрицы смежности
g = [list(map(int, input().split())) for _ in range(n)]

# Массив для отслеживания посещенных вершин
used = [False] * n

# Подсчитываем количество вершин в компоненте связности
cnt = 0
dfs(s, used, g)

# Выводим количество посещенных вершин
cnt = sum(used)  # Считаем сколько вершин помечено как посещенные
print(cnt)
