from collections import deque

def bfs(start, n, g):
    # Инициализируем массив dist, где dist[i] - кратчайшее расстояние от start до вершины i
    dist = [-1] * (n + 1)
    dist[start] = 0

    # Инициализируем очередь
    q = deque([start])

    # Запускаем поиск в ширину
    while q:
        v = q.popleft()
        for to in range(1, n + 1):
            if g[v][to] == 1 and dist[to] == -1:  # Если ребро существует и вершина не посещена
                q.append(to)
                dist[to] = dist[v] + 1

    return dist

# Основная часть программы
n, x = map(int, input().split())
g = [[0] * (n + 1) for _ in range(n + 1)]

# Чтение графа
for i in range(1, n + 1):
    row = list(map(int, input().split()))
    for j in range(1, n + 1):
        g[i][j] = row[j - 1]

# Запуск поиска в ширину из вершины x
dist = bfs(x, n, g)

# Выводим результат
for i in range(1, n + 1):
    print(dist[i], end=" ")
print()
